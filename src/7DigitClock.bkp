#include "Arduino.h"
#include "time.h"
#include "WiFi.h"
#include "DHTesp.h"


//WLAN Struktur
const char* ssid ="Bratzelwurst";
const char* pwd = "Nz2K5Ydpr7oNH7x";
const char* ntp = "ptbtime1.ptb.de";
    

//Support Struktur
#define ADC_PIN 34 //ADC2-7 an GPIO 14
#define LED_CTL 2
#define LED_SEC 33
//#define delTime 3000 // Künstliche PWM für Loop

// H10=26, H1=18, M10=19, M1=23 : Ports der 7Segmenter per Fritzing 
//7Segment Ansteuerung Struktur
#define LED_H10 26  //Akivierung eines 7Segmentblocks Stunden 10er
#define LED_H1 18   //Aktivierung des 7Segment-Blocks Stunden 1er
#define LED_M10 19  //Aktivierung des 7Segment-Blocks Minuten 10er
#define LED_M1 23   //Aktivierung des 7Segment-Blocks Minuten 1er

// a=22, b=27, c=16, d=17, e=32, f=25, g=21 : Ports jedes Segments per Fritzing
#define LED_7_A 22 //Pad zu Seg A  ebenso I2C0:SCL, Ersatzweise IO35 (Also unused ADC1)
#define LED_7_B 27 //Pad zu Seg B
#define LED_7_C 16 //Pad zu Seg C
#define LED_7_D 17 //Pad zu Seg D
#define LED_7_E 32 //Pad zu Seg E
#define LED_7_F 25 //Pad zu Seg F
#define LED_7_G 21 //Pad zu Seg G ebenso I2C0:SDA, Esatzweise IO39 (Also unused ADC3)
#define LED_RH 12 //PAD zu Anzeige der aktiven T/Rh Anzeige

// PWM Kanal, Dimmer Struktur, jeder PWM Kanal steuert ein Segment
#define LEDC_CH_0 0 // PWM Kanal 0, 0 von 15 : Port H10
#define LEDC_CH_1 1 // PWM Kanae 1, 1 von 15 : Port H1
#define LEDC_CH_2 2 // PWM Kanal 2, 2 von 15 : Port M10
#define LEDC_CH_3 3 // PWM Kanal 3, 3 von 15 : Port M10

// Setup Hum/Temp-Messung
#define DHTPIN 4
#define DHTTYPE DHT11   // DHT 11
//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)
//DHT dht(DHTPIN, DHTTYPE);
DHTesp dht;
TempAndHumidity dhtData;

// Auflösung der PWM Pulsbreiten-Quantisierung
#define LEDC_RES 12 
// Der ADC liefert 12 Bit Tiefe, vllt. ist das zu viel
#define LEDC_FRQ 2000 //Repetition Rate der Pulsfolge

//Zeitmessung
unsigned long ulTime = 0; //Timer für Sekundenblink
unsigned long ulLstTime = 0;
unsigned long ulTRH = 0;
unsigned long ulLstTRH = 0;
unsigned long ulStart;
unsigned long ulStop;

const long gmtOffs_Sec = 3600; //  Deutschland ist 1h plus
const int DayLightSavingTime_Sec = 0; //Sommerzeit 1h = 3600 sec, wenn keine Sommerzeit dann 0

//Definition der Segment-Ports für Test-Durchlauf
int iarSegs[7] = {LED_7_A,LED_7_B,LED_7_C,LED_7_D,LED_7_E,LED_7_F, LED_7_G};

/*Definition der aktiven Segmente abhängig von dem numerischen Wert einer Stelle
* Wie verpackt Mensch sinnvoll die Info Port & ON/OFF, so dass mit möglichst wenigen
* Befehlen alle Ports durchlaufen und ON/OFF gesetzt werden.
* da Byte-Weises Schreiben eines Registers erst mal nicht auf dem Programm steht
* Das geht, ist aber programtechnisch aufwendiger, muss ich erst mal lernen 
*/
int iarNum2Segs[10][7]={{1,1,1,1,1,1,0},{0,1,1,0,0,0,0},{1,1,0,1,1,0,1},{1,1,1,1,0,0,1},{0,1,1,0,0,1,1},{1,0,1,1,0,1,1},{1,0,1,1,1,1,1},{1,1,1,0,0,0,0},{1,1,1,1,1,1,1},{1,1,1,1,0,1,1}};
int i = 0;
int iChClk = 0; //Counter für die Position der Stelle/Digit
uint uiClk[4]={2,4,5,9}; // Speicher f.d. 4 Digits
//speicher für T/Rh
int iHrTmp = 0;
int iMinRH = 0;
//Zeit-Strukur-Speicher
struct tm timeinfo;

 //Um die Helligekeit der LEDs beeinflussen zu können
int lesenADC(){
  int anaRead = analogRead(ADC_PIN);
  //Serial.println("Aktueller Wert : " + String(anaRead));
  if (anaRead < 200){
    return 200;
  } else {
    return anaRead;
  }
}

void printLocalTime(){
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}

//Setup Timer and Variables as Flags/Semaphore 
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
int iTick = 0;
bool bShowRH = false;

//Ende Setup Timer

// IRQ Routine mit kritische Sektion, kann nicht unterbrochen werden
void IRAM_ATTR onTime() {
  portENTER_CRITICAL_ISR(&timerMux); 
  switch(iTick){
    case 0:
      //GetTime, wenn 0 <= iTick < 6 wird die Zeit angezeigt 
      //Serial.println("Going to read Time");
      digitalWrite(LED_RH, LOW);
      if(!getLocalTime(&timeinfo)){
        Serial.println("Failed to obtain time");
        while(true){ } //End While
      } //Loop forever ohne funktion
      uiClk[0] = timeinfo.tm_hour / 10;
      uiClk[1] = timeinfo.tm_hour % 10;   
      uiClk[2] = timeinfo.tm_min / 10;  
      uiClk[3] = timeinfo.tm_min % 10;
    break;
    case 5:
      //Allow reading data from DHT11      
      bShowRH = true;      
    break;        //iTick ist = 6 (6 Sekunden vergangen), die Anzeige schaltet T/RH auf bis iTick = 9 = 4 Sekunden Anzeigedauer  
    case 6:
      digitalWrite(LED_RH, HIGH);
      //Schreibt T/Rh Daten in den Anzeige-Array
      uiClk[0] = iHrTmp / 10;  
      uiClk[1] = iHrTmp % 10;
      uiClk[2] = iMinRH / 10;
      uiClk[3] = iMinRH % 10;   
    break;
    default:     
    break;
  } //End Switch
  
  //iTick wird nach 10 Sekunden auf 0 gesetzt und die Zeitanzeige wieder eingeschaltet     
  if (iTick<9){iTick++;}else{iTick=0;}
  
  portEXIT_CRITICAL_ISR(&timerMux);
}  //ENd if Timer IRQ Routine


/************************************
* Setup Begin
*************************************/

void setup(){
 
  Serial.begin(115200);
  //Starte DHT zugriff
  //dht.begin();
  dht.setup(DHTPIN,DHTesp::AUTO_DETECT);
  dhtData = dht.getTempAndHumidity();    
  
  //Die Segmente werden positiv angesteuert,
  // aber mit PWM Steuerung  
  ledcSetup(LEDC_CH_0, LEDC_FRQ, LEDC_RES);
  ledcSetup(LEDC_CH_1, LEDC_FRQ, LEDC_RES);  
  ledcSetup(LEDC_CH_2, LEDC_FRQ, LEDC_RES);  
  ledcSetup(LEDC_CH_3, LEDC_FRQ, LEDC_RES);    
  ledcAttachPin(LED_H10, LEDC_CH_0);
  ledcAttachPin(LED_H1, LEDC_CH_1);
  ledcAttachPin(LED_M10, LEDC_CH_2);
  ledcAttachPin(LED_M1, LEDC_CH_3);
    
  //Setup ports   
  pinMode (LED_CTL,OUTPUT);
  pinMode (LED_SEC,OUTPUT);
  pinMode (LED_RH, OUTPUT);
  //  pinMode (DHTPIN, INPUT);   
  pinMode (LED_7_A, OUTPUT);
  pinMode (LED_7_B, OUTPUT);  
  pinMode (LED_7_C, OUTPUT);
  pinMode (LED_7_D, OUTPUT);
  pinMode (LED_7_E, OUTPUT);
  pinMode (LED_7_F, OUTPUT);
  pinMode (LED_7_G, OUTPUT);
  
//Konfiguriere die Uhrzeit
  
// Connect to Wi-Fi für Zeit Server
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, pwd);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected.");    

//GetTime from Server
  configTime(gmtOffs_Sec, DayLightSavingTime_Sec, ntp);
  printLocalTime();
  uiClk[0] = timeinfo.tm_hour / 10;
  uiClk[1] = timeinfo.tm_hour % 10;   
  uiClk[2] = timeinfo.tm_min / 10;  
  uiClk[3] = timeinfo.tm_min % 10;  
 Serial.println("Time was read from PZB ad set...");  
//disconnect WiFi as it's no longer needed
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
  Serial.println("WiFi disconnected.");

  //Start testlauf 
  Serial.println("Testlauf");
          
  // Kontroll-LED, die blaue LED dient während der Entwicklung
  //der Visualisierung des Testlaufs.

  //Kontroll-LED 10 mal blinken
  for (i=0;i<9;++i){
    digitalWrite(LED_CTL,HIGH);
    delay(200);
    digitalWrite(LED_CTL,LOW);
    delay(200);
  }
  
  // Alle 7 Segmente aus
  for(i=0; i<=7; ++i){
    digitalWrite(iarSegs[i],LOW);
  }
  
  // Alle 7Segment-Digits über Common Cath aus. 
  for(i=0; i<=3; ++i){
    ledcWrite(i,0); // Setz die Pulsweite für jeden Kanal auf 0, die Digits sind aus   
  }
  
  //Jetzt alle 7 Segmente eines Digits EIN, Common Cath. ist noch aus
  for(i=0; i<=7; ++i){
    digitalWrite(iarSegs[i],HIGH); //
  }
  
  //Testlauf: jedes Digit einmal ein mit allen Segmenten angesteuert
  for(i=0; i<=3; ++i){
    digitalWrite(LED_CTL,HIGH); //Kontroll-LED an
    ledcWrite(i,1000); // Setz die Pulsweite für Kanal/Digit i auf ca maximum, jeweils ein Digit i ist an
    delay(200); //Warte 300ms
    ledcWrite(i,0); // Setz die Pulsweite für Kanal/Digit i auf 0, das Digit i ist wieder aus.    
    digitalWrite(LED_CTL, LOW); //Kontroll-LED aus
    delay(200); //Warte 300 ms       
  }  
//Abschliessend in Vorbereitung der Kontrolle   
// über das angesteuerte Digit
  iChClk = 3; //Der Anzeigezähler wird auf den höchsten Wert gesetzt und in LOOP dann als "zu löschen" behandelt

//Setze Sekunden ticker
  ulTime = millis();
  ulLstTime = millis();
      

// Configure the Prescaler at 80 the quarter of the ESP32 is cadence at 80Mhz
  iTick = 0;
  timer = timerBegin(0, 80, true);    // Prescaler 80000000 / 80 = 1000000 ticks / sekunde            
  timerAttachInterrupt(timer, &onTime, true); //Timer an Interrupt anhängen  
  timerAlarmWrite(timer, 1000000, true);    //Alarm jede Sekunde 
  timerAlarmEnable(timer);
    
  
  Serial.println("Setup fertig...");
} //End SETUP
/*
******************************************************
* Hier beginnt die Loop
******************************************************
*/

void loop() {
  //Sekundentick LED kommt später 
  ulTime = millis();
  if((ulTime-ulLstTime) > 498){    //je 1/2 Sekunde an und aus, blinkt also einkmal pro Sekunde
    ulLstTime = ulTime;
    digitalWrite(LED_SEC,not(digitalRead(LED_SEC)));
  }

  
//Erst mal letzte aktive Anzeige ausschalten / löschen, jetzt sind alle Anzeigen aus
  ledcWrite(iChClk,0); // Setz die Pulsweite für Digit i auf 0, das Digit i ist wieder aus.
  //delay(1);
//iChClk behandeln: wenn >=3 oder <0 dann iChClk=0 (>=3 zur Sicherheit) sonst iChClk++
  switch(iChClk){
    case 0 ... 2:
      iChClk++; // iChClk kann bis 3 hochzählen
    break;
    default:
      iChClk=0; //Wenn > 2 im nächsten Durchlauf (=3) dann wird es zurückgesetzt auf 0
  } //End switch iChCLk
  //Serial.print("iChClk: ");
  //Serial.println(iChClk);
//Wert der aktuellen Stelle in der Uhrzeit passend gemäß iChClk abrufen

// die 7 Segment Ports gemäß aktuellem Wert setzen
  for(i=0;i<7;++i){
    digitalWrite(iarSegs[i],iarNum2Segs[uiClk[iChClk]][i]);
  }

//Das Digit einschalten bzw auf den Leuchtwer gemäß Dimmer setzen
  ledcWrite(iChClk,lesenADC()); // Helligkeit wird entsprechend des analogen Spannnungswertes am ADC0 Eingang gesetzt
  /*
  * Das nachfolgende Delay ist experimentell eingestellt worden
  * und sorgt für ein Gleichgewicht von ausreichend schnellem Scan der Digits (Einzelne Anzeige-Blöcke)
  * zum Zweck der Flackerfreien Darstellung und ausreichend langer Dauer der Ansteuerung der Digits, so dass
  * diese Zeit haben zu leuchten. Kürzere Zeiten lassen die Digits zu dunkel werden. 
  * Längere Zeiten lassen die Gesamtanzeige zwar heller werden, dafür flackert sie aber auch deutlicher
  *
  * Die Delay-Zeit ist abhängig vom Zeitbedarf der Ansteuerung in Void Loop, da hier noch keine Bitmaskenansteuerung
  * eingesetzt wird, was mit der Arduino Sprache direkt nicht geht. Man muss einen Umweg über die nativen Elemente 
  * des ESP32 gehen und Aufgaben der Kommandos "digitalWrite" und "pinmode" auflösen und selber ausführen.
  *  Aufgrund der komplexen Struktur innerhalb des ESP32 von zuweisbaren Funtkionen und verfügbare Pads, die sowohl
  * direkt als auch über einen I/O Multiplexer miteineder dynamisch verbunden werden können, ist das Ansprechen von Registern
  * (Wie in der alten 8Bit microController-Welt der 90iger Jahre) nicht mehr so einfach möglich. 
  * (Quelle: https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf)
  */ 

  if (bShowRH){
    // DT11 T/RH daten holen
    // Reading temperature or humidity takes about 22 milliseconds!
    ulStart = micros();    
    dhtData = dht.getTempAndHumidity();    
    iHrTmp = int(dhtData.temperature);
    iMinRH = int(dhtData.humidity);
    ulStop = micros() - ulStart;
    Serial.print(ulStop);
    Serial.println(" µs");
    bShowRH = false;
  }  else {
    delay(6);
  }    
}//End LOOP
